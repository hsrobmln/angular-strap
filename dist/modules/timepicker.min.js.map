{"version":3,"sources":["timepicker.min.js","timepicker/timepicker.js"],"names":["angular","module","provider","defaults","this","animation","prefixClass","placement","template","trigger","container","keyboard","html","delay","useNative","timeType","timeFormat","timezone","modelTimeFormat","autoclose","minTime","Infinity","maxTime","length","hourStep","minuteStep","secondStep","roundDisplay","iconUp","iconDown","arrowBehavior","$get","$window","$document","$rootScope","$sce","$dateFormatter","$tooltip","$timeout","timepickerFactory","element","controller","config","floorMinutes","time","coeff","options","Date","Math","floor","getTime","createSelection","start","end","createTextRange","selRange","collapse","moveStart","moveEnd","select","setSelectionRange","isUndefined","selectionStart","selectionEnd","focusElement","focus","$timepicker","extend","parentScope","scope","$options","$scope","lang","formatDate","date","format","selectedIndex","defaultDate","startDate","$dateValue","viewDate","hour","getHours","meridian","minute","getMinutes","second","getSeconds","millisecond","getMilliseconds","getDatetimeFormat","hoursFormat","timeSeparator","minutesFormat","secondsFormat","showSeconds","showAM","$iconUp","$iconDown","$select","index","$moveIndex","value","$switchMeridian","switchMeridian","update","isDate","isNaN","$date","$build","$isBuilt","keep","setHours","setMinutes","setSeconds","$setViewValue","copy","$render","hide","hours","i","midIndex","parseInt","push","label","selected","$isSelected","disabled","$isDisabled","minutes","seconds","rows","isAM","selectedTime","$arrowAction","$setTimeByStep","newDate","targetDate","$onMouseDown","evt","target","nodeName","toLowerCase","preventDefault","stopPropagation","isTouch","targetEl","parent","triggerHandler","$onKeyDown","test","keyCode","shiftKey","altKey","hoursLength","minutesLength","secondsLength","sepLength","lateralMove","count","selectRange","incr","isSeconds","isMeridian","$digest","_init","init","isNative","prop","css","attr","on","_destroy","destroy","off","_show","show","$element","_hide","blur","$isShown","document","body","navigator","userAgent","getDefaultLocale","directive","$parse","$q","$dateParser","requestAnimationFrame","setTimeout","restrict","require","link","validateAgainstMinMaxTime","parsedTime","isMinValid","setFullYear","isMaxValid","isValid","$setValidity","getTimeFormattedString","forEach","key","isDefined","falseValueRegExp","bsShow","$watch","newValue","oldValue","timepicker","isString","match","dateParser","$observe","getTimeForAttribute","ngModel","$parsers","unshift","viewValue","parse","timezoneOffsetAdjust","toISOString","$formatters","modelValue","NaN","val","$on"],"mappings":"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","file":"timepicker.min.js","sourcesContent":[null,"'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.timepicker', [\r\n  'mgcrea.ngStrap.helpers.dateParser',\r\n  'mgcrea.ngStrap.helpers.dateFormatter',\r\n  'mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$timepicker', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      //uncommenting the following line will break backwards compatability\r\n      // prefixEvent: 'timepicker',\r\n      prefixClass: 'timepicker',\r\n      placement: 'bottom-left',\r\n      template: 'timepicker/timepicker.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      // lang: $locale.id,\r\n      useNative: true,\r\n      timeType: 'date',\r\n      timeFormat: 'shortTime',\r\n      timezone: null,\r\n      modelTimeFormat: null,\r\n      autoclose: false,\r\n      minTime: -Infinity,\r\n      maxTime: +Infinity,\r\n      length: 5,\r\n      hourStep: 1,\r\n      minuteStep: 5,\r\n      secondStep: 5,\r\n      roundDisplay: false,\r\n      iconUp: 'glyphicon glyphicon-chevron-up',\r\n      iconDown: 'glyphicon glyphicon-chevron-down',\r\n      arrowBehavior: 'pager'\r\n    };\r\n\r\n    this.$get = function($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      if(!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\r\n\r\n      function timepickerFactory(element, controller, config) {\r\n\r\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\r\n        var parentScope = config.scope;\r\n        var options = $timepicker.$options;\r\n        var scope = $timepicker.$scope;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function(date, format, timezone) {\r\n          return $dateFormatter.formatDate(date, format, lang, timezone);\r\n        };\r\n\r\n        function floorMinutes(time)\r\n        {\r\n          // coeff used to floor current time to nearest minuteStep interval\r\n          var coeff = 1000 * 60 * options.minuteStep;\r\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\r\n        }\r\n\r\n        // View vars\r\n\r\n        var selectedIndex = 0;\r\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\r\n        var startDate = controller.$dateValue || defaultDate;\r\n        var viewDate = {hour: startDate.getHours(), meridian: startDate.getHours() < 12, minute: startDate.getMinutes(), second: startDate.getSeconds(), millisecond: startDate.getMilliseconds()};\r\n\r\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\r\n\r\n        var hoursFormat = $dateFormatter.hoursFormat(format),\r\n          timeSeparator = $dateFormatter.timeSeparator(format),\r\n          minutesFormat = $dateFormatter.minutesFormat(format),\r\n          secondsFormat = $dateFormatter.secondsFormat(format),\r\n          showSeconds = $dateFormatter.showSeconds(format),\r\n          showAM = $dateFormatter.showAM(format);\r\n\r\n        scope.$iconUp = options.iconUp;\r\n        scope.$iconDown = options.iconDown;\r\n\r\n        // Scope methods\r\n\r\n        scope.$select = function(date, index) {\r\n          $timepicker.select(date, index);\r\n        };\r\n        scope.$moveIndex = function(value, index) {\r\n          $timepicker.$moveIndex(value, index);\r\n        };\r\n        scope.$switchMeridian = function(date) {\r\n          $timepicker.switchMeridian(date);\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $timepicker.update = function(date) {\r\n          // console.warn('$timepicker.update() newValue=%o', date);\r\n          if(angular.isDate(date) && !isNaN(date.getTime())) {\r\n            $timepicker.$date = date;\r\n            angular.extend(viewDate, {hour: date.getHours(), minute: date.getMinutes(), second: date.getSeconds(), millisecond: date.getMilliseconds()});\r\n            $timepicker.$build();\r\n          } else if(!$timepicker.$isBuilt) {\r\n            $timepicker.$build();\r\n          }\r\n        };\r\n\r\n        $timepicker.select = function(date, index, keep) {\r\n          // console.warn('$timepicker.select', date, scope.$mode);\r\n          if(!controller.$dateValue || isNaN(controller.$dateValue.getTime())) controller.$dateValue = new Date(1970, 0, 1);\r\n          if(!angular.isDate(date)) date = new Date(date);\r\n          if(index === 0) controller.$dateValue.setHours(date.getHours());\r\n          else if(index === 1) controller.$dateValue.setMinutes(date.getMinutes());\r\n          else if(index === 2) controller.$dateValue.setSeconds(date.getSeconds());\r\n          controller.$setViewValue(angular.copy(controller.$dateValue));\r\n          controller.$render();\r\n          if(options.autoclose && !keep) {\r\n            $timeout(function() { $timepicker.hide(true); });\r\n          }\r\n        };\r\n\r\n        $timepicker.switchMeridian = function(date) {\r\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\r\n            return;\r\n          }\r\n          var hours = (date || controller.$dateValue).getHours();\r\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\r\n          controller.$setViewValue(angular.copy(controller.$dateValue));\r\n          controller.$render();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $timepicker.$build = function() {\r\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\r\n          var i, midIndex = scope.midIndex = parseInt(options.length / 2, 10);\r\n          var hours = [], hour;\r\n          for(i = 0; i < options.length; i++) {\r\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\r\n            hours.push({date: hour, label: formatDate(hour, hoursFormat), selected: $timepicker.$date && $timepicker.$isSelected(hour, 0), disabled: $timepicker.$isDisabled(hour, 0)});\r\n          }\r\n          var minutes = [], minute;\r\n          for(i = 0; i < options.length; i++) {\r\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\r\n            minutes.push({date: minute, label: formatDate(minute, minutesFormat), selected: $timepicker.$date && $timepicker.$isSelected(minute, 1), disabled: $timepicker.$isDisabled(minute, 1)});\r\n          }\r\n          var seconds = [], second;\r\n          for(i = 0; i < options.length; i++) {\r\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\r\n            seconds.push({date: second, label: formatDate(second, secondsFormat), selected: $timepicker.$date && $timepicker.$isSelected(second, 2), disabled: $timepicker.$isDisabled(second, 2)});\r\n          }\r\n\r\n          var rows = [];\r\n          for(i = 0; i < options.length; i++) {\r\n            if (showSeconds) {\r\n              rows.push([hours[i], minutes[i], seconds[i]]);\r\n            } else {\r\n              rows.push([hours[i], minutes[i]]);\r\n            }\r\n          }\r\n          scope.rows = rows;\r\n          scope.showSeconds = showSeconds;\r\n          scope.showAM = showAM;\r\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\r\n          scope.timeSeparator = timeSeparator;\r\n          $timepicker.$isBuilt = true;\r\n        };\r\n\r\n        $timepicker.$isSelected = function(date, index) {\r\n          if(!$timepicker.$date) return false;\r\n          else if(index === 0) {\r\n            return date.getHours() === $timepicker.$date.getHours();\r\n          } else if(index === 1) {\r\n            return date.getMinutes() === $timepicker.$date.getMinutes();\r\n          } else if(index === 2) {\r\n            return date.getSeconds() === $timepicker.$date.getSeconds();\r\n          }\r\n        };\r\n\r\n        $timepicker.$isDisabled = function(date, index) {\r\n          var selectedTime;\r\n          if(index === 0) {\r\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\r\n          } else if(index === 1) {\r\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\r\n          } else if(index === 2) {\r\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\r\n          }\r\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\r\n        };\r\n\r\n        scope.$arrowAction = function (value, index) {\r\n          if (options.arrowBehavior === 'picker') {\r\n            $timepicker.$setTimeByStep(value,index);\r\n          } else {\r\n            $timepicker.$moveIndex(value,index);\r\n          }\r\n        };\r\n\r\n        $timepicker.$setTimeByStep = function(value, index) {\r\n          var newDate = new Date($timepicker.$date);\r\n          var hours = newDate.getHours(), hoursLength = formatDate(newDate, hoursFormat).length;\r\n          var minutes = newDate.getMinutes(), minutesLength = formatDate(newDate, minutesFormat).length;\r\n          var seconds = newDate.getSeconds(), secondsLength = formatDate(newDate, secondsFormat).length;\r\n          if (index === 0) {\r\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\r\n          }\r\n          else if (index === 1) {\r\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\r\n          }\r\n          else if (index === 2) {\r\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\r\n          }\r\n          $timepicker.select(newDate, index, true);\r\n        };\r\n\r\n        $timepicker.$moveIndex = function(value, index) {\r\n          var targetDate;\r\n          if(index === 0) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\r\n            angular.extend(viewDate, {hour: targetDate.getHours()});\r\n          } else if(index === 1) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\r\n            angular.extend(viewDate, {minute: targetDate.getMinutes()});\r\n          } else if(index === 2) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\r\n            angular.extend(viewDate, {second: targetDate.getSeconds()});\r\n          }\r\n          $timepicker.$build();\r\n        };\r\n\r\n        $timepicker.$onMouseDown = function(evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          if(evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if(isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            if(targetEl[0].nodeName.toLowerCase() !== 'button') {\r\n              targetEl = targetEl.parent();\r\n            }\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        $timepicker.$onKeyDown = function(evt) {\r\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          // Close on enter\r\n          if(evt.keyCode === 13) return $timepicker.hide(true);\r\n\r\n          // Navigate with keyboard\r\n          var newDate = new Date($timepicker.$date);\r\n          var hours = newDate.getHours(), hoursLength = formatDate(newDate, hoursFormat).length;\r\n          var minutes = newDate.getMinutes(), minutesLength = formatDate(newDate, minutesFormat).length;\r\n          var seconds = newDate.getSeconds(), secondsLength = formatDate(newDate, secondsFormat).length;\r\n          var sepLength = 1;\r\n          var lateralMove = /(37|39)/.test(evt.keyCode);\r\n          var count = 2 + showSeconds * 1 + showAM * 1;\r\n\r\n          // Navigate indexes (left, right)\r\n          if (lateralMove) {\r\n            if(evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\r\n            else if(evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\r\n          }\r\n\r\n          // Update values (up, down)\r\n          var selectRange = [0, hoursLength];\r\n          var incr = 0;\r\n          if (evt.keyCode === 38) incr = -1;\r\n          if (evt.keyCode === 40) incr = +1;\r\n          var isSeconds = selectedIndex === 2 && showSeconds;\r\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\r\n          if(selectedIndex === 0) {\r\n            newDate.setHours(hours + incr*parseInt(options.hourStep, 10));\r\n            // re-calculate hours length because we have changed hours value\r\n            hoursLength = formatDate(newDate, hoursFormat).length;\r\n            selectRange = [0, hoursLength];\r\n          } else if(selectedIndex === 1) {\r\n            newDate.setMinutes(minutes + incr*parseInt(options.minuteStep, 10));\r\n            // re-calculate minutes length because we have changes minutes value\r\n            minutesLength = formatDate(newDate, minutesFormat).length;\r\n            selectRange = [hoursLength + sepLength, minutesLength];\r\n          } else if(isSeconds) {\r\n            newDate.setSeconds(seconds + incr*parseInt(options.secondStep, 10));\r\n            // re-calculate seconds length because we have changes seconds value\r\n            secondsLength = formatDate(newDate, secondsFormat).length;\r\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\r\n          } else if(isMeridian) {\r\n            if(!lateralMove) $timepicker.switchMeridian();\r\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength)*showSeconds, 2];\r\n          }\r\n          $timepicker.select(newDate, selectedIndex, true);\r\n          createSelection(selectRange[0], selectRange[1]);\r\n          parentScope.$digest();\r\n        };\r\n\r\n        // Private\r\n\r\n        function createSelection(start, length) {\r\n          var end = start + length;\r\n          if(element[0].createTextRange) {\r\n            var selRange = element[0].createTextRange();\r\n            selRange.collapse(true);\r\n            selRange.moveStart('character', start);\r\n            selRange.moveEnd('character', end);\r\n            selRange.select();\r\n          } else if(element[0].setSelectionRange) {\r\n            element[0].setSelectionRange(start, end);\r\n          } else if(angular.isUndefined(element[0].selectionStart)) {\r\n            element[0].selectionStart = start;\r\n            element[0].selectionEnd = end;\r\n          }\r\n        }\r\n\r\n        function focusElement() {\r\n          element[0].focus();\r\n        }\r\n\r\n        // Overrides\r\n\r\n        var _init = $timepicker.init;\r\n        $timepicker.init = function() {\r\n          if(isNative && options.useNative) {\r\n            element.prop('type', 'time');\r\n            element.css('-webkit-appearance', 'textfield');\r\n            return;\r\n          } else if(isTouch) {\r\n            element.prop('type', 'text');\r\n            element.attr('readonly', 'true');\r\n            element.on('click', focusElement);\r\n          }\r\n          _init();\r\n        };\r\n\r\n        var _destroy = $timepicker.destroy;\r\n        $timepicker.destroy = function() {\r\n          if(isNative && options.useNative) {\r\n            element.off('click', focusElement);\r\n          }\r\n          _destroy();\r\n        };\r\n\r\n        var _show = $timepicker.show;\r\n        $timepicker.show = function() {\r\n          _show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function() {\r\n            $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\r\n            if(options.keyboard) {\r\n              element.on('keydown', $timepicker.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $timepicker.hide;\r\n        $timepicker.hide = function(blur) {\r\n          if(!$timepicker.$isShown) return;\r\n          $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\r\n          if(options.keyboard) {\r\n            element.off('keydown', $timepicker.$onKeyDown);\r\n          }\r\n          _hide(blur);\r\n        };\r\n\r\n        return $timepicker;\r\n\r\n      }\r\n\r\n      timepickerFactory.defaults = defaults;\r\n      return timepickerFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n\r\n  .directive('bsTimepicker', function($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\r\n\r\n    var defaults = $timepicker.defaults;\r\n    var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\r\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, controller: controller};\r\n        angular.forEach(['placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'template', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function(key) {\r\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\r\n            options[key] = false;\r\n        });\r\n\r\n        // Visibility binding support\r\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\r\n          if(!timepicker || !angular.isDefined(newValue)) return;\r\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\r\n          newValue === true ? timepicker.show() : timepicker.hide();\r\n        });\r\n\r\n        // Initialize timepicker\r\n        if(isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\r\n        var timepicker = $timepicker(element, controller, options);\r\n        options = timepicker.$options;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function(date, format, timezone) {\r\n          return $dateFormatter.formatDate(date, format, lang, timezone);\r\n        };\r\n\r\n        // Initialize parser\r\n        var dateParser = $dateParser({format: options.timeFormat, lang: lang});\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minTime', 'maxTime'], function(key) {\r\n          // console.warn('attr.$observe(%s)', key, attr[key]);\r\n          angular.isDefined(attr[key]) && attr.$observe(key, function(newValue) {\r\n            timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\r\n            !isNaN(timepicker.$options[key]) && timepicker.$build();\r\n            validateAgainstMinMaxTime(controller.$dateValue);\r\n          });\r\n        });\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\r\n          timepicker.update(controller.$dateValue);\r\n        }, true);\r\n\r\n        function validateAgainstMinMaxTime(parsedTime) {\r\n          if (!angular.isDate(parsedTime)) return;\r\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\r\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if(!isValid) {\r\n              return;\r\n          }\r\n          controller.$dateValue = parsedTime;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function(viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          var date;\r\n          // Null values should correctly reset the model value & validity\r\n          if(!viewValue) {\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3\r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            controller.$setValidity('date', true);\r\n            return null;\r\n          }\r\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\r\n          if(!parsedTime || isNaN(parsedTime.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // return undefined, causes ngModelController to\r\n            // invalidate model value\r\n            return;\r\n          } else {\r\n            validateAgainstMinMaxTime(parsedTime);\r\n          }\r\n\r\n          if(options.timeType === 'string') {\r\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\r\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\r\n          }\r\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\r\n          if(options.timeType === 'number') {\r\n            return date.getTime();\r\n          } else if(options.timeType === 'unix') {\r\n            return date.getTime() / 1000;\r\n          } else if(options.timeType === 'iso') {\r\n            return date.toISOString();\r\n          } else {\r\n            return new Date(date);\r\n          }\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function(modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if(angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if(angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if(options.timeType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\r\n          } else if(options.timeType === 'unix') {\r\n            date = new Date(modelValue * 1000);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\r\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\r\n          return getTimeFormattedString();\r\n        });\r\n\r\n        // viewValue -> element\r\n        controller.$render = function() {\r\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\r\n          element.val(getTimeFormattedString());\r\n        };\r\n\r\n        function getTimeFormattedString() {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (timepicker) timepicker.destroy();\r\n          options = null;\r\n          timepicker = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n"],"sourceRoot":"/source/"}