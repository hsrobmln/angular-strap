{"version":3,"sources":["parse-options.min.js","helpers/parse-options.js"],"names":["angular","module","provider","defaults","this","regexp","$get","$parse","$q","ParseOptionsFactory","attr","config","parseValues","values","scope","map","match","index","label","value","locals","valueName","displayFn","valueFn","$parseOptions","options","extend","$values","keyName","groupByFn","valuesFn","init","$match","controller","when","then","displayValue","modelValue"],"mappings":"AAOA,YAEAA,SAAQC,OAAO,0CAEZC,SAAS,gBAAiB,WAEzB,GAAIC,GAAWC,KAAKD,UAClBE,OCAM,+KDGRD,MCAIE,MAAI,SAAU,KAAQ,SAAWC,EAAAC,GDEnC,QAASC,GAAoBC,EAAMC,GAqCjC,QAASC,GAAYC,EAAQC,GAC3B,MAAOD,GAAOE,IAAI,SAASC,EAAOC,GAChC,GAAiBC,GAAOC,EAApBC,IAIJ,OCHJA,GAAAC,GAAcL,EACdE,EAAOI,EAAAR,EAAAM,GDCHD,EAAQI,EAAQT,EAAOM,IACfF,MAAOA,EAAOC,MAAOA,EAAOF,MAAOA,KCzC/C,GAAIO,MAGFC,EAAAzB,QAAc0B,UAAiBvB,EAAKQ,EDCtCa,GCAcG,UDGd,ICAEX,GAAAM,EAAmBD,EAAYO,EAAAC,EAAAN,EAAAO,CDuCjC,OArCAN,GCAaO,KAAO,WDClBP,EAAcQ,OAAShB,EAAQN,EAAKM,MAAMS,EAAQpB,QAClDiB,EAAYf,EAAOS,EAAM,IAAMA,EAAM,ICCvCK,EAAcL,EAAA,IAAWA,EAAA,GACvBY,EAAUZ,EAAK,GDCfa,ECAMtB,EAASS,EAAQ,IAAA,IDCvBO,ECAEhB,EAAcS,EAAA,GAAUA,EAAA,GAASK,GDCnCS,ECASvB,EAAAS,EAAc,KDGzBQ,EAAcM,SAAW,SAAShB,EAAOmB,GCCzC,MAAAzB,GAAA0B,KAAcJ,EAAAhB,EAAemB,IAC3BE,KAAI,SAAQtB,GAEZ,MADAW,GAAMG,QAAad,EAAAD,EAAAC,EAAAC,MACZU,EAAUG,WDInBH,EAAcY,aAAe,SAASC,GCCtC,GAAAvB,KDEE,OCDAA,GAAAO,GAAkBgB,EACZf,EAASR,IDejBU,EAAcO,OACPP,EAIT,MAAOf","file":"parse-options.min.js","sourcesContent":[null,"'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\r\n\r\n  .provider('$parseOptions', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\r\n    };\r\n\r\n    this.$get = function($parse, $q) {\r\n\r\n      function ParseOptionsFactory(attr, config) {\r\n\r\n        var $parseOptions = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        $parseOptions.$values = [];\r\n\r\n        // Private vars\r\n        var match, displayFn, valueName, keyName, groupByFn, valueFn, valuesFn;\r\n\r\n        $parseOptions.init = function() {\r\n          $parseOptions.$match = match = attr.match(options.regexp);\r\n          displayFn = $parse(match[2] || match[1]),\r\n          valueName = match[4] || match[6],\r\n          keyName = match[5],\r\n          groupByFn = $parse(match[3] || ''),\r\n          valueFn = $parse(match[2] ? match[1] : valueName),\r\n          valuesFn = $parse(match[7]);\r\n        };\r\n\r\n        $parseOptions.valuesFn = function(scope, controller) {\r\n          return $q.when(valuesFn(scope, controller))\r\n          .then(function(values) {\r\n            $parseOptions.$values = values ? parseValues(values, scope) : {};\r\n            return $parseOptions.$values;\r\n          });\r\n        };\r\n\r\n        $parseOptions.displayValue = function(modelValue) {\r\n          var scope = {};\r\n          scope[valueName] = modelValue;\r\n          return displayFn(scope);\r\n        };\r\n\r\n        // Private functions\r\n\r\n        function parseValues(values, scope) {\r\n          return values.map(function(match, index) {\r\n            var locals = {}, label, value;\r\n            locals[valueName] = match;\r\n            label = displayFn(scope, locals);\r\n            value = valueFn(scope, locals);\r\n            return {label: label, value: value, index: index};\r\n          });\r\n        }\r\n\r\n        $parseOptions.init();\r\n        return $parseOptions;\r\n\r\n      }\r\n\r\n      return ParseOptionsFactory;\r\n\r\n    };\r\n\r\n  });\r\n"],"sourceRoot":"/source/"}