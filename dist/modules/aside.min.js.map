{"version":3,"sources":["aside.min.js","aside/aside.js"],"names":["angular","module","provider","defaults","this","animation","prefixClass","prefixEvent","placement","template","contentTemplate","container","element","backdrop","keyboard","html","show","$get","$modal","AsideFactory","config","$aside","options","extend","directive","$window","$sce","requestAnimationFrame","setTimeout","restrict","scope","link","attr","transclusion","forEach","key","isDefined","falseValueRegExp","test","$observe","newValue","oldValue","trustAsHtml","bsAside","$watch","isObject","content","aside","on","trigger","toggle","$on","destroy"],"mappings":"AAOA,YAEAA,SCAMC,OAAA,wBAAa,yBDEhBC,SCAG,SAAU,WDEZ,GCAEC,GAAWC,KAAAD,UACXE,UAAS,0BACTC,YAAU,QACVC,YAAU,QACVC,UAAM,QACNC,SAAM,uBDCNC,iBAAiB,EACjBC,WAAW,ECCbC,QAAK,KDCHC,UAAU,ECCVC,UAAS,EDCTC,MAAM,EACNC,MCAM,EDGRZ,MCAIa,MAAI,SAAU,SAAQC,GDExB,QCAEC,GAAgBC,GAEhB,GAAAC,MDGIC,EAAUtB,QAAQuB,UAAWpB,EAAUiB,EAI3C,OAFAC,GAASH,EAAOI,GAMlB,MAAOH,OAMVK,UCAS,WAAS,UAAS,OAAO,SAAe,SAAAC,EAAcC,EAAAL,GAEpCI,EAAOE,uBAAwBF,EAAAG,UDEzD,QACEC,SAAU,MACVC,OAAO,EACPC,KAAM,SAAkBD,EAAOlB,EAASoB,EAAMC,GCE5C,GAAAX,IAAQQ,MAASA,EAAYlB,QAAAA,EAAYI,MAAQ,EDCjDhB,SCAKkC,SAAQ,WAAe,kBAAS,YAAsB,WAAK,WAAA,OAAA,YAAA,aAAA,SAAAC,GAC5DnC,QAAQoC,UAAOJ,EAAAG,MAAAb,EAAAa,GAAAH,EAAAG,KAInB,IAAAE,GAAiB,eDCjBrC,SCAOkC,SAAQ,WAAc,WAAK,OAAS,aAAoB,SAAAC,GAC3DnC,QAAMoC,UAAYJ,EAAAG,KAAYE,EAAAC,KAAAN,EAAAG,MDC9Bb,EAAQa,IAAO,KCInBnC,QAAKkC,SAAW,QAAM,WAAY,SAASC,GACzCH,EAAGG,IAAQH,EAAAO,SAASJ,EAAW,SAAAK,EAAAC,GAC7BX,EAAAK,GAAQT,EAAOgB,YAAOF,ODK1BR,EAAKW,SAAWb,EAAMc,OAAOZ,EAAKW,QAAS,SAASH,EAAUC,GACzDzC,QAAQ6C,SAASL,GCClBxC,QAAQuB,OAAOO,EAAAU,GDEfV,EAAMgB,QAAUN,IAEjB,EAGH,ICAEO,GAAI1B,EAAaC,EDGnBV,GAAQoC,GAAGhB,EAAKiB,SAAW,QAASF,EAAMG,QAG1CpB,EAAMqB,IAAI,WAAY,WAChBJ,GAAOA,EAAMK,UACjB9B,EAAU,KCCpByB,EAAA","file":"aside.min.js","sourcesContent":[null,"'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\r\n\r\n  .provider('$aside', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade-and-slide-right',\r\n      prefixClass: 'aside',\r\n      prefixEvent: 'aside',\r\n      placement: 'right',\r\n      template: 'aside/aside.tpl.html',\r\n      contentTemplate: false,\r\n      container: false,\r\n      element: null,\r\n      backdrop: true,\r\n      keyboard: true,\r\n      html: false,\r\n      show: true\r\n    };\r\n\r\n    this.$get = function($modal) {\r\n\r\n      function AsideFactory(config) {\r\n\r\n        var $aside = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $aside = $modal(options);\r\n\r\n        return $aside;\r\n\r\n      }\r\n\r\n      return AsideFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAside', function($window, $sce, $aside) {\r\n\r\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink(scope, element, attr, transclusion) {\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function(key) {\r\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\r\n            options[key] = false;\r\n        });\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function(key) {\r\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\r\n            scope[key] = $sce.trustAsHtml(newValue);\r\n          });\r\n        });\r\n\r\n        // Support scope as an object\r\n        attr.bsAside && scope.$watch(attr.bsAside, function(newValue, oldValue) {\r\n          if(angular.isObject(newValue)) {\r\n            angular.extend(scope, newValue);\r\n          } else {\r\n            scope.content = newValue;\r\n          }\r\n        }, true);\r\n\r\n        // Initialize aside\r\n        var aside = $aside(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', aside.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (aside) aside.destroy();\r\n          options = null;\r\n          aside = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n"],"sourceRoot":"/source/"}