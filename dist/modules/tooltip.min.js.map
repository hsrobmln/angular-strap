{"version":3,"sources":["tooltip.min.js","tooltip/tooltip.js"],"names":["angular","module","provider","defaults","this","animation","customClass","prefixClass","prefixEvent","container","target","placement","template","contentTemplate","trigger","keyboard","html","show","title","type","delay","autoClose","bsEnabled","viewport","selector","padding","$get","$window","$rootScope","$compile","$q","$templateCache","$http","$animate","$sce","dimensions","$$rAF","$timeout","TooltipFactory","element","config","enterAnimateCallback","scope","$emit","options","$tooltip","leaveAnimateCallback","tipElement","_tipToHide","_blur","blur","destroyTipElement","bindTriggerEvents","triggers","split","forEach","on","toggle","enter","leave","nodeName","isTouch","$onFocusElementMouseDown","unbindTriggerEvents","i","length","off","bindKeyboardEvents","$onKeyUp","$onFocusKeyUp","unbindKeyboardEvents","bindAutoCloseEvents","stopEventPropagation","$body","hide","_autoCloseEventsBinded","unbindAutoCloseEvents","event","stopPropagation","getPosition","$element","el","isBody","tagName","elRect","getBoundingClientRect","rect","p","width","extend","right","left","height","bottom","top","elOffset","offset","scroll","document","documentElement","scrollTop","body","prop","outerDims","clientWidth","innerHeight","getCalculatedOffset","position","actualWidth","actualHeight","applyPlacement","tip","offsetWidth","offsetHeight","marginTop","parseInt","css","marginLeft","isNaN","setOffset","using","props","Math","round","test","delta","getViewportAdjustedDelta","isVertical","arrowDelta","arrowOffsetPosition","replaceArrow","$viewport","findElement","viewportPadding","viewportDimensions","topEdgeOffset","bottomEdgeOffset","leftEdgeOffset","rightEdgeOffset","dimension","isHorizontal","$arrow","clearTimeout","timeout","$isShown","tipScope","$destroy","remove","toLowerCase","$options","$promise","fetchTemplate","$scope","$new","isString","map","parseFloat","$id","id","attr","trustAsHtml","$setEnabled","isEnabled","$$postDigest","setEnabled","$hide","$show","$toggle","hoverState","then","templateEl","contentEl","removeAttr","outerHTML","tipLinker","tipTemplate","tipContainer","isObject","data","replace","htmlReplaceRegExp","trim","apply","init","isNumber","isElement","focus","destroy","setTimeout","parent","after","lastChild","clonedElement","display","visibility","addClass","prepend","safeDigest","$applyPlacement","promise","setViewport","autoToken","autoPlace","elementPosition","tipWidth","tipHeight","originalPlacement","containerPosition","indexOf","removeClass","tipPosition","evt","which","preventDefault","$$phase","$root","$digest","query","querySelectorAll","fetchPromises","get","cache","res","String","prototype","directive","$location","restrict","link","transclusion","key","isDefined","falseValueRegExp","dataTarget","hasOwnProperty","$observe","newValue","oldValue","tooltip","bsTooltip","$watch","bsShow","match","$on"],"mappings":"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","file":"tooltip.min.js","sourcesContent":[null,"'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$tooltip', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      customClass: '',\r\n      prefixClass: 'tooltip',\r\n      prefixEvent: 'tooltip',\r\n      container: false,\r\n      target: false,\r\n      placement: 'top',\r\n      template: 'tooltip/tooltip.tpl.html',\r\n      contentTemplate: false,\r\n      trigger: 'hover focus',\r\n      keyboard: false,\r\n      html: false,\r\n      show: false,\r\n      title: '',\r\n      type: '',\r\n      delay: 0,\r\n      autoClose: false,\r\n      bsEnabled: true,\r\n      viewport: {\r\n       selector: 'body',\r\n       padding: 0\r\n      }\r\n    };\r\n\r\n    this.$get = function($window, $rootScope, $compile, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\r\n\r\n      var trim = String.prototype.trim;\r\n      var isTouch = 'createTouch' in $window.document;\r\n      var htmlReplaceRegExp = /ng-bind=\"/ig;\r\n      var $body = angular.element($window.document);\r\n\r\n      function TooltipFactory(element, config) {\r\n\r\n        var $tooltip = {};\r\n\r\n        // Common vars\r\n        var nodeName = element[0].nodeName.toLowerCase();\r\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\r\n        $tooltip.$promise = fetchTemplate(options.template);\r\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n        if(options.delay && angular.isString(options.delay)) {\r\n          var split = options.delay.split(',').map(parseFloat);\r\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\r\n        }\r\n\r\n        // store $id to identify the triggering element in events\r\n        // give priority to options.id, otherwise, try to use\r\n        // element id if defined\r\n        $tooltip.$id = options.id || element.attr('id') || '';\r\n\r\n        // Support scope as string options\r\n        if(options.title) {\r\n          scope.title = $sce.trustAsHtml(options.title);\r\n        }\r\n\r\n        // Provide scope helpers\r\n        scope.$setEnabled = function(isEnabled) {\r\n          scope.$$postDigest(function() {\r\n            $tooltip.setEnabled(isEnabled);\r\n          });\r\n        };\r\n        scope.$hide = function() {\r\n          scope.$$postDigest(function() {\r\n            $tooltip.hide();\r\n          });\r\n        };\r\n        scope.$show = function() {\r\n          scope.$$postDigest(function() {\r\n            $tooltip.show();\r\n          });\r\n        };\r\n        scope.$toggle = function() {\r\n          scope.$$postDigest(function() {\r\n            $tooltip.toggle();\r\n          });\r\n        };\r\n        // Publish isShown as a protected var on scope\r\n        $tooltip.$isShown = scope.$isShown = false;\r\n\r\n        // Private vars\r\n        var timeout, hoverState;\r\n\r\n        // Support contentTemplate option\r\n        if(options.contentTemplate) {\r\n          $tooltip.$promise = $tooltip.$promise.then(function(template) {\r\n            var templateEl = angular.element(template);\r\n            return fetchTemplate(options.contentTemplate)\r\n            .then(function(contentTemplate) {\r\n              var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0]);\r\n              if(!contentEl.length) contentEl = findElement('[ng-bind=\"title\"]', templateEl[0]);\r\n              contentEl.removeAttr('ng-bind').html(contentTemplate);\r\n              return templateEl[0].outerHTML;\r\n            });\r\n          });\r\n        }\r\n\r\n        // Fetch, compile then initialize tooltip\r\n        var tipLinker, tipElement, tipTemplate, tipContainer, tipScope;\r\n        $tooltip.$promise.then(function(template) {\r\n          if(angular.isObject(template)) template = template.data;\r\n          if(options.html) template = template.replace(htmlReplaceRegExp, 'ng-bind-html=\"');\r\n          template = trim.apply(template);\r\n          tipTemplate = template;\r\n          tipLinker = $compile(template);\r\n          $tooltip.init();\r\n        });\r\n\r\n        $tooltip.init = function() {\r\n\r\n          // Options: delay\r\n          if (options.delay && angular.isNumber(options.delay)) {\r\n            options.delay = {\r\n              show: options.delay,\r\n              hide: options.delay\r\n            };\r\n          }\r\n\r\n          // Replace trigger on touch devices ?\r\n          // if(isTouch && options.trigger === defaults.trigger) {\r\n          //   options.trigger.replace(/hover/g, 'click');\r\n          // }\r\n\r\n          // Options : container\r\n          if(options.container === 'self') {\r\n            tipContainer = element;\r\n          } else if(angular.isElement(options.container)) {\r\n            tipContainer = options.container;\r\n          } else if(options.container) {\r\n            tipContainer = findElement(options.container);\r\n          }\r\n\r\n          // Options: trigger\r\n          bindTriggerEvents();\r\n\r\n          // Options: target\r\n          if(options.target) {\r\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\r\n          }\r\n\r\n          // Options: show\r\n          if(options.show) {\r\n            scope.$$postDigest(function() {\r\n              options.trigger === 'focus' ? element[0].focus() : $tooltip.show();\r\n            });\r\n          }\r\n\r\n        };\r\n\r\n        $tooltip.destroy = function() {\r\n\r\n          // Unbind events\r\n          unbindTriggerEvents();\r\n\r\n          // Remove element\r\n          destroyTipElement();\r\n\r\n          // Destroy scope\r\n          scope.$destroy();\r\n\r\n        };\r\n\r\n        $tooltip.enter = function() {\r\n\r\n          clearTimeout(timeout);\r\n          hoverState = 'in';\r\n          if (!options.delay || !options.delay.show) {\r\n            return $tooltip.show();\r\n          }\r\n\r\n          timeout = setTimeout(function() {\r\n            if (hoverState ==='in') $tooltip.show();\r\n          }, options.delay.show);\r\n\r\n        };\r\n\r\n        $tooltip.show = function() {\r\n          if (!options.bsEnabled || $tooltip.$isShown) return;\r\n\r\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\r\n          var parent, after;\r\n          if (options.container) {\r\n            parent = tipContainer;\r\n            if (tipContainer[0].lastChild) {\r\n              after = angular.element(tipContainer[0].lastChild);\r\n            } else {\r\n              after = null;\r\n            }\r\n          } else {\r\n            parent = null;\r\n            after = element;\r\n          }\r\n\r\n\r\n          // Hide any existing tipElement\r\n          if(tipElement) destroyTipElement();\r\n          // Fetch a cloned element linked from template\r\n          tipScope = $tooltip.$scope.$new();\r\n          tipElement = $tooltip.$element = tipLinker(tipScope, function(clonedElement, scope) {});\r\n\r\n          // Set the initial positioning.  Make the tooltip invisible\r\n          // so IE doesn't try to focus on it off screen.\r\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\r\n\r\n          // Options: animation\r\n          if(options.animation) tipElement.addClass(options.animation);\r\n          // Options: type\r\n          if(options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\r\n          // Options: custom classes\r\n          if(options.customClass) tipElement.addClass(options.customClass);\r\n\r\n          // Append the element, without any animations.  If we append\r\n          // using $animate.enter, some of the animations cause the placement\r\n          // to be off due to the transforms.\r\n          after ? after.after(tipElement) : parent.prepend(tipElement);\r\n\r\n          $tooltip.$isShown = scope.$isShown = true;\r\n          safeDigest(scope);\r\n\r\n          // Now, apply placement\r\n          $tooltip.$applyPlacement();\r\n\r\n          // Once placed, animate it.\r\n          // Support v1.3+ $animate\r\n          // https://github.com/angular/angular.js/commit/bf0f5502b1bbfddc5cdd2f138efd9188b8c652a9\r\n          var promise = $animate.enter(tipElement, parent, after, enterAnimateCallback);\r\n          if(promise && promise.then) promise.then(enterAnimateCallback);\r\n          safeDigest(scope);\r\n\r\n          $$rAF(function () {\r\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\r\n            if(tipElement) tipElement.css({visibility: 'visible'});\r\n          });\r\n\r\n          // Bind events\r\n          if(options.keyboard) {\r\n            if(options.trigger !== 'focus') {\r\n              $tooltip.focus();\r\n            }\r\n            bindKeyboardEvents();\r\n          }\r\n\r\n          if(options.autoClose) {\r\n            bindAutoCloseEvents();\r\n          }\r\n\r\n        };\r\n\r\n        function enterAnimateCallback() {\r\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\r\n        }\r\n\r\n        $tooltip.leave = function() {\r\n\r\n          clearTimeout(timeout);\r\n          hoverState = 'out';\r\n          if (!options.delay || !options.delay.hide) {\r\n            return $tooltip.hide();\r\n          }\r\n          timeout = setTimeout(function () {\r\n            if (hoverState === 'out') {\r\n              $tooltip.hide();\r\n            }\r\n          }, options.delay.hide);\r\n\r\n        };\r\n\r\n        var _blur;\r\n        var _tipToHide;\r\n        $tooltip.hide = function(blur) {\r\n\r\n          if(!$tooltip.$isShown) return;\r\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\r\n\r\n          // store blur value for leaveAnimateCallback to use\r\n          _blur = blur;\r\n\r\n          // store current tipElement reference to use\r\n          // in leaveAnimateCallback\r\n          _tipToHide = tipElement;\r\n\r\n          // Support v1.3+ $animate\r\n          // https://github.com/angular/angular.js/commit/bf0f5502b1bbfddc5cdd2f138efd9188b8c652a9\r\n          var promise = $animate.leave(tipElement, leaveAnimateCallback);\r\n          if(promise && promise.then) promise.then(leaveAnimateCallback);\r\n\r\n          $tooltip.$isShown = scope.$isShown = false;\r\n          safeDigest(scope);\r\n\r\n          // Unbind events\r\n          if(options.keyboard && tipElement !== null) {\r\n            unbindKeyboardEvents();\r\n          }\r\n\r\n          if(options.autoClose && tipElement !== null) {\r\n            unbindAutoCloseEvents();\r\n          }\r\n        };\r\n\r\n        function leaveAnimateCallback() {\r\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\r\n\r\n          // check if current tipElement still references\r\n          // the same element when hide was called\r\n          if (tipElement === _tipToHide) {\r\n            // Allow to blur the input when hidden, like when pressing enter key\r\n            if(_blur && options.trigger === 'focus') {\r\n              return element[0].blur();\r\n            }\r\n\r\n            // clean up child scopes\r\n            destroyTipElement();\r\n          }\r\n        }\r\n\r\n        $tooltip.toggle = function() {\r\n          $tooltip.$isShown ? $tooltip.leave() : $tooltip.enter();\r\n        };\r\n\r\n        $tooltip.focus = function() {\r\n          tipElement[0].focus();\r\n        };\r\n\r\n        $tooltip.setEnabled = function(isEnabled) {\r\n          options.bsEnabled = isEnabled;\r\n        };\r\n\r\n        $tooltip.setViewport = function(viewport) {\r\n          options.viewport = viewport;\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $tooltip.$applyPlacement = function() {\r\n          if(!tipElement) return;\r\n\r\n          // Determine if we're doing an auto or normal placement\r\n          var placement = options.placement,\r\n              autoToken = /\\s?auto?\\s?/i,\r\n              autoPlace  = autoToken.test(placement);\r\n\r\n          if (autoPlace) {\r\n            placement = placement.replace(autoToken, '') || defaults.placement;\r\n          }\r\n\r\n          // Need to add the position class before we get\r\n          // the offsets\r\n          tipElement.addClass(options.placement);\r\n\r\n          // Get the position of the target element\r\n          // and the height and width of the tooltip so we can center it.\r\n          var elementPosition = getPosition(),\r\n              tipWidth = tipElement.prop('offsetWidth'),\r\n              tipHeight = tipElement.prop('offsetHeight');\r\n\r\n          // If we're auto placing, we need to check the positioning\r\n          if (autoPlace) {\r\n            var originalPlacement = placement;\r\n            var container = options.container ? findElement(options.container) : element.parent();\r\n            var containerPosition = getPosition(container);\r\n\r\n            // Determine if the vertical placement\r\n            if (originalPlacement.indexOf('bottom') >= 0 && elementPosition.bottom + tipHeight > containerPosition.bottom) {\r\n              placement = originalPlacement.replace('bottom', 'top');\r\n            } else if (originalPlacement.indexOf('top') >= 0 && elementPosition.top - tipHeight < containerPosition.top) {\r\n              placement = originalPlacement.replace('top', 'bottom');\r\n            }\r\n\r\n            // Determine the horizontal placement\r\n            // The exotic placements of left and right are opposite of the standard placements.  Their arrows are put on the left/right\r\n            // and flow in the opposite direction of their placement.\r\n            if ((originalPlacement === 'right' || originalPlacement === 'bottom-left' || originalPlacement === 'top-left') &&\r\n                elementPosition.right + tipWidth > containerPosition.width) {\r\n\r\n              placement = originalPlacement === 'right' ? 'left' : placement.replace('left', 'right');\r\n            } else if ((originalPlacement === 'left' || originalPlacement === 'bottom-right' || originalPlacement === 'top-right') &&\r\n                elementPosition.left - tipWidth < containerPosition.left) {\r\n\r\n              placement = originalPlacement === 'left' ? 'right' : placement.replace('right', 'left');\r\n            }\r\n\r\n            tipElement.removeClass(originalPlacement).addClass(placement);\r\n          }\r\n\r\n          // Get the tooltip's top and left coordinates to center it with this directive.\r\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\r\n          applyPlacement(tipPosition, placement);\r\n        };\r\n\r\n        $tooltip.$onKeyUp = function(evt) {\r\n          if (evt.which === 27 && $tooltip.$isShown) {\r\n            $tooltip.hide();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $tooltip.$onFocusKeyUp = function(evt) {\r\n          if (evt.which === 27) {\r\n            element[0].blur();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $tooltip.$onFocusElementMouseDown = function(evt) {\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Some browsers do not auto-focus buttons (eg. Safari)\r\n          $tooltip.$isShown ? element[0].blur() : element[0].focus();\r\n        };\r\n\r\n        // bind/unbind events\r\n        function bindTriggerEvents() {\r\n          var triggers = options.trigger.split(' ');\r\n          angular.forEach(triggers, function(trigger) {\r\n            if(trigger === 'click') {\r\n              element.on('click', $tooltip.toggle);\r\n            } else if(trigger !== 'manual') {\r\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\r\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\r\n              nodeName === 'button' && trigger !== 'hover' && element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\r\n            }\r\n          });\r\n        }\r\n\r\n        function unbindTriggerEvents() {\r\n          var triggers = options.trigger.split(' ');\r\n          for (var i = triggers.length; i--;) {\r\n            var trigger = triggers[i];\r\n            if(trigger === 'click') {\r\n              element.off('click', $tooltip.toggle);\r\n            } else if(trigger !== 'manual') {\r\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\r\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\r\n              nodeName === 'button' && trigger !== 'hover' && element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\r\n            }\r\n          }\r\n        }\r\n\r\n        function bindKeyboardEvents() {\r\n          if(options.trigger !== 'focus') {\r\n            tipElement.on('keyup', $tooltip.$onKeyUp);\r\n          } else {\r\n            element.on('keyup', $tooltip.$onFocusKeyUp);\r\n          }\r\n        }\r\n\r\n        function unbindKeyboardEvents() {\r\n          if(options.trigger !== 'focus') {\r\n            tipElement.off('keyup', $tooltip.$onKeyUp);\r\n          } else {\r\n            element.off('keyup', $tooltip.$onFocusKeyUp);\r\n          }\r\n        }\r\n\r\n        var _autoCloseEventsBinded = false;\r\n        function bindAutoCloseEvents() {\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function() {\r\n            // Stop propagation when clicking inside tooltip\r\n            tipElement.on('click', stopEventPropagation);\r\n\r\n            // Hide when clicking outside tooltip\r\n            $body.on('click', $tooltip.hide);\r\n\r\n            _autoCloseEventsBinded = true;\r\n          }, 0, false);\r\n        }\r\n\r\n        function unbindAutoCloseEvents() {\r\n          if (_autoCloseEventsBinded) {\r\n            tipElement.off('click', stopEventPropagation);\r\n            $body.off('click', $tooltip.hide);\r\n            _autoCloseEventsBinded = false;\r\n          }\r\n        }\r\n\r\n        function stopEventPropagation(event) {\r\n          event.stopPropagation();\r\n        }\r\n\r\n        // Private methods\r\n\r\n        function getPosition($element) {\r\n          $element = $element || (options.target || element);\r\n\r\n          var el = $element[0],\r\n              isBody = el.tagName === 'BODY';\r\n\r\n          var elRect = el.getBoundingClientRect();\r\n          var rect = {};\r\n\r\n          // IE8 has issues with angular.extend and using elRect directly.\r\n          // By coping the values of elRect into a new object, we can continue to use extend\r\n          for (var p in elRect) {\r\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\r\n            rect[p] = elRect[p];\r\n          }\r\n\r\n          if (rect.width === null) {\r\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\r\n            rect = angular.extend({}, rect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top });\r\n          }\r\n          var elOffset = isBody ? { top: 0, left: 0 } : dimensions.offset(el),\r\n              scroll = { scroll:  isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0 },\r\n              outerDims = isBody ? { width: document.documentElement.clientWidth, height: $window.innerHeight } : null;\r\n\r\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\r\n        }\r\n\r\n        function getCalculatedOffset(placement, position, actualWidth, actualHeight) {\r\n          var offset;\r\n          var split = placement.split('-');\r\n\r\n          switch (split[0]) {\r\n          case 'right':\r\n            offset = {\r\n              top: position.top + position.height / 2 - actualHeight / 2,\r\n              left: position.left + position.width\r\n            };\r\n            break;\r\n          case 'bottom':\r\n            offset = {\r\n              top: position.top + position.height,\r\n              left: position.left + position.width / 2 - actualWidth / 2\r\n            };\r\n            break;\r\n          case 'left':\r\n            offset = {\r\n              top: position.top + position.height / 2 - actualHeight / 2,\r\n              left: position.left - actualWidth\r\n            };\r\n            break;\r\n          default:\r\n            offset = {\r\n              top: position.top - actualHeight,\r\n              left: position.left + position.width / 2 - actualWidth / 2\r\n            };\r\n            break;\r\n          }\r\n\r\n          if(!split[1]) {\r\n            return offset;\r\n          }\r\n\r\n          // Add support for corners @todo css\r\n          if(split[0] === 'top' || split[0] === 'bottom') {\r\n            switch (split[1]) {\r\n            case 'left':\r\n              offset.left = position.left;\r\n              break;\r\n            case 'right':\r\n              offset.left =  position.left + position.width - actualWidth;\r\n            }\r\n          } else if(split[0] === 'left' || split[0] === 'right') {\r\n            switch (split[1]) {\r\n            case 'top':\r\n              offset.top = position.top - actualHeight;\r\n              break;\r\n            case 'bottom':\r\n              offset.top = position.top + position.height;\r\n            }\r\n          }\r\n\r\n          return offset;\r\n        }\r\n\r\n        function applyPlacement(offset, placement) {\r\n          var tip = tipElement[0],\r\n              width = tip.offsetWidth,\r\n              height = tip.offsetHeight;\r\n\r\n          // manually read margins because getBoundingClientRect includes difference\r\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10),\r\n              marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\r\n\r\n          // we must check for NaN for ie 8/9\r\n          if (isNaN(marginTop)) marginTop  = 0;\r\n          if (isNaN(marginLeft)) marginLeft = 0;\r\n\r\n          offset.top  = offset.top + marginTop;\r\n          offset.left = offset.left + marginLeft;\r\n\r\n          // dimensions setOffset doesn't round pixel values\r\n          // so we use setOffset directly with our own function\r\n          dimensions.setOffset(tip, angular.extend({\r\n            using: function (props) {\r\n              tipElement.css({\r\n                top: Math.round(props.top) + 'px',\r\n                left: Math.round(props.left) + 'px',\r\n                right: ''\r\n              });\r\n            }\r\n          }, offset), 0);\r\n\r\n          // check to see if placing tip in new offset caused the tip to resize itself\r\n          var actualWidth = tip.offsetWidth,\r\n              actualHeight = tip.offsetHeight;\r\n\r\n          if (placement === 'top' && actualHeight !== height) {\r\n            offset.top = offset.top + height - actualHeight;\r\n          }\r\n\r\n          // If it's an exotic placement, exit now instead of\r\n          // applying a delta and changing the arrow\r\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\r\n\r\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\r\n\r\n          if (delta.left) {\r\n            offset.left += delta.left;\r\n          } else {\r\n            offset.top += delta.top;\r\n          }\r\n\r\n          dimensions.setOffset(tip, offset);\r\n\r\n          if (/top|right|bottom|left/.test(placement)) {\r\n            var isVertical = /top|bottom/.test(placement),\r\n                arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight,\r\n                arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\r\n\r\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\r\n          }\r\n        }\r\n\r\n        function getViewportAdjustedDelta(placement, position, actualWidth, actualHeight) {\r\n          var delta = { top: 0, left: 0 },\r\n              $viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\r\n\r\n          if (!$viewport) {\r\n           return delta;\r\n          }\r\n\r\n          var viewportPadding = options.viewport && options.viewport.padding || 0,\r\n              viewportDimensions = getPosition($viewport);\r\n\r\n          if (/right|left/.test(placement)) {\r\n            var topEdgeOffset    = position.top - viewportPadding - viewportDimensions.scroll,\r\n                bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\r\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\r\n              delta.top = viewportDimensions.top - topEdgeOffset;\r\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\r\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\r\n            }\r\n          } else {\r\n            var leftEdgeOffset  = position.left - viewportPadding,\r\n                rightEdgeOffset = position.left + viewportPadding + actualWidth;\r\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\r\n              delta.left = viewportDimensions.left - leftEdgeOffset;\r\n            } else if (rightEdgeOffset > viewportDimensions.width) { // right overflow\r\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\r\n            }\r\n          }\r\n\r\n          return delta;\r\n        }\r\n\r\n        function replaceArrow(delta, dimension, isHorizontal) {\r\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\r\n\r\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\r\n                .css(isHorizontal ? 'top' : 'left', '');\r\n        }\r\n\r\n        function destroyTipElement() {\r\n          // Cancel pending callbacks\r\n          clearTimeout(timeout);\r\n\r\n          if($tooltip.$isShown && tipElement !== null) {\r\n            if(options.autoClose) {\r\n              unbindAutoCloseEvents();\r\n            }\r\n\r\n            if(options.keyboard) {\r\n              unbindKeyboardEvents();\r\n            }\r\n          }\r\n\r\n          if(tipScope) {\r\n            tipScope.$destroy();\r\n            tipScope = null;\r\n          }\r\n\r\n          if(tipElement) {\r\n            tipElement.remove();\r\n            tipElement = $tooltip.$element = null;\r\n          }\r\n        }\r\n\r\n        return $tooltip;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest(scope) {\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n      }\r\n\r\n      function findElement(query, element) {\r\n        return angular.element((element || document).querySelectorAll(query));\r\n      }\r\n\r\n      var fetchPromises = {};\r\n      function fetchTemplate(template) {\r\n        if(fetchPromises[template]) return fetchPromises[template];\r\n        return (fetchPromises[template] = $http.get(template, {cache: $templateCache}).then(function(res) {\r\n          return res.data;\r\n        }));\r\n      }\r\n\r\n      return TooltipFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsTooltip', function($window, $location, $sce, $tooltip, $$rAF) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink(scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container'], function(key) {\r\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\r\n            options[key] = false;\r\n        });\r\n\r\n        // should not parse target attribute (anchor tag), only data-target #1454\r\n        var dataTarget = element.attr('data-target');\r\n        if(angular.isDefined(dataTarget)) {\r\n          if(falseValueRegExp.test(dataTarget))\r\n            options.target = false;\r\n          else\r\n            options.target = dataTarget;\r\n        }\r\n\r\n        // overwrite inherited title value when no value specified\r\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\r\n        if (!scope.hasOwnProperty('title')){\r\n          scope.title = '';\r\n        }\r\n\r\n        // Observe scope attributes for change\r\n        attr.$observe('title', function(newValue) {\r\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\r\n            var oldValue = scope.title;\r\n            scope.title = $sce.trustAsHtml(newValue);\r\n            angular.isDefined(oldValue) && $$rAF(function() {\r\n              tooltip && tooltip.$applyPlacement();\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        attr.bsTooltip && scope.$watch(attr.bsTooltip, function(newValue, oldValue) {\r\n          if(angular.isObject(newValue)) {\r\n            angular.extend(scope, newValue);\r\n          } else {\r\n            scope.title = newValue;\r\n          }\r\n          angular.isDefined(oldValue) && $$rAF(function() {\r\n            tooltip && tooltip.$applyPlacement();\r\n          });\r\n        }, true);\r\n\r\n        // Visibility binding support\r\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\r\n          if(!tooltip || !angular.isDefined(newValue)) return;\r\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\r\n          newValue === true ? tooltip.show() : tooltip.hide();\r\n        });\r\n\r\n        // Enabled binding support\r\n        attr.bsEnabled && scope.$watch(attr.bsEnabled, function(newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\r\n          if(!tooltip || !angular.isDefined(newValue)) return;\r\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\r\n          newValue === false ? tooltip.setEnabled(false) : tooltip.setEnabled(true);\r\n        });\r\n\r\n        // Viewport support\r\n        attr.viewport && scope.$watch(attr.viewport, function (newValue) {\r\n          if(!tooltip || !angular.isDefined(newValue)) return;\r\n          tooltip.setViewport(newValue);\r\n        });\r\n\r\n        // Initialize popover\r\n        var tooltip = $tooltip(element, options);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if(tooltip) tooltip.destroy();\r\n          options = null;\r\n          tooltip = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n"],"sourceRoot":"/source/"}