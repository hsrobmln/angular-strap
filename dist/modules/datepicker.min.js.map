{"version":3,"sources":["datepicker.min.js","datepicker/datepicker.js"],"names":["angular","module","provider","defaults","this","animation","prefixClass","placement","template","trigger","container","keyboard","html","delay","useNative","dateType","dateFormat","timezone","modelDateFormat","dayFormat","monthFormat","yearFormat","monthTitleFormat","yearTitleFormat","strictFormat","autoclose","minDate","Infinity","maxDate","startView","minView","startWeek","daysOfWeekDisabled","iconLeft","iconRight","$get","$window","$document","$rootScope","$sce","$dateFormatter","datepickerViews","$tooltip","$timeout","DatepickerFactory","element","controller","config","updateSelected","el","selected","$datepicker","$isSelected","date","focusElement","focus","extend","parentScope","scope","options","$options","$scope","pickerViews","$views","views","viewDate","$mode","$iconLeft","$iconRight","$picker","$select","select","$selectPane","value","$toggleMode","setMode","length","update","isDate","isNaN","getTime","$date","call","$build","updateDisabledDates","dateRanges","disabledDateRanges","i","l","rows","forEach","$setDisabledEl","keep","$dateValue","Date","$setViewValue","copy","$render","hide","year","getFullYear","month","getMonth","getDate","mode","pristine","built","build","$updateSelected","isSelected","disabled","isDisabled","steps","targetDate","UTC","getUTCFullYear","getUTCMonth","getUTCDate","$onMouseDown","evt","preventDefault","stopPropagation","isTouch","targetEl","target","nodeName","toLowerCase","parent","triggerHandler","$onKeyDown","test","keyCode","shiftKey","altKey","$apply","onKeyDown","$digest","_init","init","isNative","prop","css","attr","on","_destroy","destroy","off","_show","show","$isShown","$element","_hide","blur","document","body","navigator","userAgent","lang","getDefaultLocale","directive","$parse","$q","$dateParser","restrict","require","link","normalizeDateRanges","ranges","validateAgainstMinMaxDate","parsedDate","rangeTestDate","dateParser","timezoneOffsetAdjust","isMinValid","datepicker","isMaxValid","isValid","$setValidity","getDateFormattedString","formatDate","key","isDefined","falseValueRegExp","bsShow","$watch","newValue","oldValue","isString","match","format","strict","$observe","getDateForAttribute","ngModel","disabledDates","disabledRanges","previousValue","$parsers","unshift","viewValue","parse","toISOString","$formatters","push","modelValue","isUndefined","NaN","val","$on","split","arr","size","arrays","splice","mod","n","m","daySplit","picker","weekDaysMin","weekdaysShort","weekDaysLabels","slice","concat","weekDaysLabelsHtml","trustAsHtml","join","startDate","force","firstDayOfMonth","firstDayOfMonthOffset","getTimezoneOffset","firstDate","getDay","firstDateOffset","today","toDateString","day","days","daylightSavingAdjust","isToday","label","muted","title","showLabels","labels","time","indexOf","start","end","newDate","actualTime","name","months","lastDate","actualMonth","setMonth","parseInt","firstYear","years","actualYear","setYear","Array","prototype"],"mappings":"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","file":"datepicker.min.js","sourcesContent":[null,"'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.datepicker', [\r\n  'mgcrea.ngStrap.helpers.dateParser',\r\n  'mgcrea.ngStrap.helpers.dateFormatter',\r\n  'mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$datepicker', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      //uncommenting the following line will break backwards compatability\r\n      // prefixEvent: 'datepicker',\r\n      prefixClass: 'datepicker',\r\n      placement: 'bottom-left',\r\n      template: 'datepicker/datepicker.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      // lang: $locale.id,\r\n      useNative: false,\r\n      dateType: 'date',\r\n      dateFormat: 'shortDate',\r\n      timezone: null,\r\n      modelDateFormat: null,\r\n      dayFormat: 'dd',\r\n      monthFormat: 'MMM',\r\n      yearFormat: 'yyyy',\r\n      monthTitleFormat: 'MMMM yyyy',\r\n      yearTitleFormat: 'yyyy',\r\n      strictFormat: false,\r\n      autoclose: false,\r\n      minDate: -Infinity,\r\n      maxDate: +Infinity,\r\n      startView: 0,\r\n      minView: 0,\r\n      startWeek: 0,\r\n      daysOfWeekDisabled: '',\r\n      iconLeft: 'glyphicon glyphicon-chevron-left',\r\n      iconRight: 'glyphicon glyphicon-chevron-right'\r\n    };\r\n\r\n    this.$get = function($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      if(!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\r\n\r\n      function DatepickerFactory(element, controller, config) {\r\n\r\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\r\n        var parentScope = config.scope;\r\n        var options = $datepicker.$options;\r\n        var scope = $datepicker.$scope;\r\n        if(options.startView) options.startView -= options.minView;\r\n\r\n        // View vars\r\n\r\n        var pickerViews = datepickerViews($datepicker);\r\n        $datepicker.$views = pickerViews.views;\r\n        var viewDate = pickerViews.viewDate;\r\n        scope.$mode = options.startView;\r\n        scope.$iconLeft = options.iconLeft;\r\n        scope.$iconRight = options.iconRight;\r\n        var $picker = $datepicker.$views[scope.$mode];\r\n\r\n        // Scope methods\r\n\r\n        scope.$select = function(date) {\r\n          $datepicker.select(date);\r\n        };\r\n        scope.$selectPane = function(value) {\r\n          $datepicker.$selectPane(value);\r\n        };\r\n        scope.$toggleMode = function() {\r\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $datepicker.update = function(date) {\r\n          // console.warn('$datepicker.update() newValue=%o', date);\r\n          if(angular.isDate(date) && !isNaN(date.getTime())) {\r\n            $datepicker.$date = date;\r\n            $picker.update.call($picker, date);\r\n          }\r\n          // Build only if pristine\r\n          $datepicker.$build(true);\r\n        };\r\n\r\n        $datepicker.updateDisabledDates = function(dateRanges) {\r\n          options.disabledDateRanges = dateRanges;\r\n          for(var i = 0, l = scope.rows.length; i < l; i++) {\r\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\r\n          }\r\n        };\r\n\r\n        $datepicker.select = function(date, keep) {\r\n          // console.warn('$datepicker.select', date, scope.$mode);\r\n          if(!angular.isDate(controller.$dateValue)) controller.$dateValue = new Date(date);\r\n          if(!scope.$mode || keep) {\r\n            controller.$setViewValue(angular.copy(date));\r\n            controller.$render();\r\n            if(options.autoclose && !keep) {\r\n              $timeout(function() { $datepicker.hide(true); });\r\n            }\r\n          } else {\r\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\r\n            $datepicker.setMode(scope.$mode - 1);\r\n            $datepicker.$build();\r\n          }\r\n        };\r\n\r\n        $datepicker.setMode = function(mode) {\r\n          // console.warn('$datepicker.setMode', mode);\r\n          scope.$mode = mode;\r\n          $picker = $datepicker.$views[scope.$mode];\r\n          $datepicker.$build();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $datepicker.$build = function(pristine) {\r\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\r\n          if(pristine === true && $picker.built) return;\r\n          if(pristine === false && !$picker.built) return;\r\n          $picker.build.call($picker);\r\n        };\r\n\r\n        $datepicker.$updateSelected = function() {\r\n          for(var i = 0, l = scope.rows.length; i < l; i++) {\r\n            angular.forEach(scope.rows[i], updateSelected);\r\n          }\r\n        };\r\n\r\n        $datepicker.$isSelected = function(date) {\r\n          return $picker.isSelected(date);\r\n        };\r\n\r\n        $datepicker.$setDisabledEl = function(el) {\r\n          el.disabled = $picker.isDisabled(el.date);\r\n        };\r\n\r\n        $datepicker.$selectPane = function(value) {\r\n          var steps = $picker.steps;\r\n          // set targetDate to first day of month to avoid problems with\r\n          // date values rollover. This assumes the viewDate does not\r\n          // depend on the day of the month\r\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\r\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\r\n          $datepicker.$build();\r\n        };\r\n\r\n        $datepicker.$onMouseDown = function(evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if(isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            if(targetEl[0].nodeName.toLowerCase() !== 'button') {\r\n              targetEl = targetEl.parent();\r\n            }\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        $datepicker.$onKeyDown = function(evt) {\r\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          if(evt.keyCode === 13) {\r\n            if(!scope.$mode) {\r\n              return $datepicker.hide(true);\r\n            } else {\r\n              return scope.$apply(function() { $datepicker.setMode(scope.$mode - 1); });\r\n            }\r\n          }\r\n\r\n          // Navigate with keyboard\r\n          $picker.onKeyDown(evt);\r\n          parentScope.$digest();\r\n        };\r\n\r\n        // Private\r\n\r\n        function updateSelected(el) {\r\n          el.selected = $datepicker.$isSelected(el.date);\r\n        }\r\n\r\n        function focusElement() {\r\n          element[0].focus();\r\n        }\r\n\r\n        // Overrides\r\n\r\n        var _init = $datepicker.init;\r\n        $datepicker.init = function() {\r\n          if(isNative && options.useNative) {\r\n            element.prop('type', 'date');\r\n            element.css('-webkit-appearance', 'textfield');\r\n            return;\r\n          } else if(isTouch) {\r\n            element.prop('type', 'text');\r\n            element.attr('readonly', 'true');\r\n            element.on('click', focusElement);\r\n          }\r\n          _init();\r\n        };\r\n\r\n        var _destroy = $datepicker.destroy;\r\n        $datepicker.destroy = function() {\r\n          if(isNative && options.useNative) {\r\n            element.off('click', focusElement);\r\n          }\r\n          _destroy();\r\n        };\r\n\r\n        var _show = $datepicker.show;\r\n        $datepicker.show = function() {\r\n          _show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function() {\r\n            // if $datepicker is no longer showing, don't setup events\r\n            if(!$datepicker.$isShown) return;\r\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\r\n            if(options.keyboard) {\r\n              element.on('keydown', $datepicker.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $datepicker.hide;\r\n        $datepicker.hide = function(blur) {\r\n          if(!$datepicker.$isShown) return;\r\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\r\n          if(options.keyboard) {\r\n            element.off('keydown', $datepicker.$onKeyDown);\r\n          }\r\n          _hide(blur);\r\n        };\r\n\r\n        return $datepicker;\r\n\r\n      }\r\n\r\n      DatepickerFactory.defaults = defaults;\r\n      return DatepickerFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsDatepicker', function($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\r\n\r\n    var defaults = $datepicker.defaults;\r\n    var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, controller: controller};\r\n        angular.forEach(['placement', 'container', 'delay', 'trigger', 'html', 'animation', 'template', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoclose', 'useNative'], function(key) {\r\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\r\n            options[key] = false;\r\n        });\r\n\r\n        // Visibility binding support\r\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\r\n          if(!datepicker || !angular.isDefined(newValue)) return;\r\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\r\n          newValue === true ? datepicker.show() : datepicker.hide();\r\n        });\r\n\r\n        // Initialize datepicker\r\n        var datepicker = $datepicker(element, controller, options);\r\n        options = datepicker.$options;\r\n        // Set expected iOS format\r\n        if(isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\r\n\r\n        var lang = options.lang;\r\n\r\n        var formatDate = function(date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n\r\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minDate', 'maxDate'], function(key) {\r\n          // console.warn('attr.$observe(%s)', key, attr[key]);\r\n          angular.isDefined(attr[key]) && attr.$observe(key, function(newValue) {\r\n            // console.warn('attr.$observe(%s)=%o', key, newValue);\r\n            datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\r\n            // Build only if dirty\r\n            !isNaN(datepicker.$options[key]) && datepicker.$build(false);\r\n            validateAgainstMinMaxDate(controller.$dateValue);\r\n          });\r\n        });\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\r\n          datepicker.update(controller.$dateValue);\r\n        }, true);\r\n\r\n        // Normalize undefined/null/empty array,\r\n        // so that we don't treat changing from undefined->null as a change.\r\n        function normalizeDateRanges(ranges) {\r\n          if (!ranges || !ranges.length) return null;\r\n          return ranges;\r\n        }\r\n\r\n        if (angular.isDefined(attr.disabledDates)) {\r\n          scope.$watch(attr.disabledDates, function(disabledRanges, previousValue) {\r\n            disabledRanges = normalizeDateRanges(disabledRanges);\r\n            previousValue = normalizeDateRanges(previousValue);\r\n\r\n            if (disabledRanges) {\r\n              datepicker.updateDisabledDates(disabledRanges);\r\n            }\r\n          });\r\n        }\r\n\r\n        function validateAgainstMinMaxDate(parsedDate) {\r\n          if (!angular.isDate(parsedDate)) return;\r\n          var rangeTestDate = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\r\n          //console.debug('rangeTestDate', rangeTestDate, 'minDate, maxDate', datepicker.$options.minDate, datepicker.$options.maxDate)\r\n          var isMinValid = isNaN(datepicker.$options.minDate) || rangeTestDate.getTime() >= datepicker.$options.minDate;\r\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || rangeTestDate.getTime() <= datepicker.$options.maxDate;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if(isValid) controller.$dateValue = parsedDate;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function(viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          var date;\r\n          // Null values should correctly reset the model value & validity\r\n          if(!viewValue) {\r\n            controller.$setValidity('date', true);\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3\r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            return null;\r\n          }\r\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\r\n          if(!parsedDate || isNaN(parsedDate.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // return undefined, causes ngModelController to\r\n            // invalidate model value\r\n            return;\r\n          } else {\r\n            validateAgainstMinMaxDate(parsedDate);\r\n          }\r\n\r\n          if(options.dateType === 'string') {\r\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\r\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\r\n          }\r\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\r\n          if(options.dateType === 'number') {\r\n            return date.getTime();\r\n          } else if(options.dateType === 'unix') {\r\n            return date.getTime() / 1000;\r\n          } else if(options.dateType === 'iso') {\r\n            return date.toISOString();\r\n          } else {\r\n            return new Date(date);\r\n          }\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function(modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if(angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if(angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if(options.dateType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\r\n          } else if(options.dateType === 'unix') {\r\n            date = new Date(modelValue * 1000);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if(isNaN(date.getTime())) {\r\n          //   var today = new Date();\r\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\r\n          // }\r\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\r\n          return getDateFormattedString();\r\n        });\r\n\r\n        // viewValue -> element\r\n        controller.$render = function() {\r\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\r\n          element.val(getDateFormattedString());\r\n        };\r\n\r\n        function getDateFormattedString() {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if(datepicker) datepicker.destroy();\r\n          options = null;\r\n          datepicker = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .provider('datepickerViews', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      dayFormat: 'dd',\r\n      daySplit: 7\r\n    };\r\n\r\n    // Split array into smaller arrays\r\n    function split(arr, size) {\r\n      var arrays = [];\r\n      while(arr.length > 0) {\r\n        arrays.push(arr.splice(0, size));\r\n      }\r\n      return arrays;\r\n    }\r\n\r\n    // Modulus operator\r\n    function mod(n, m) {\r\n      return ((n % m) + m) % m;\r\n    }\r\n\r\n    this.$get = function($dateFormatter, $dateParser, $sce) {\r\n\r\n      return function(picker) {\r\n\r\n        var scope = picker.$scope;\r\n        var options = picker.$options;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function(date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\r\n\r\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\r\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\r\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\r\n\r\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\r\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\r\n\r\n        var views = [{\r\n            format: options.dayFormat,\r\n            split: 7,\r\n            steps: { month: 1 },\r\n            update: function(date, force) {\r\n              if(!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\r\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n                picker.$build();\r\n              } else if(date.getDate() !== viewDate.date || date.getDate() === 1) {\r\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\r\n                // in $datepicker.$selectPane, so picker would not update selected day display if\r\n                // user picks first day of the new month.\r\n                // As a workaround, we are always forcing update when picked date is first day of month.\r\n                viewDate.date = picker.$date.getDate();\r\n                picker.$updateSelected();\r\n              }\r\n            },\r\n            build: function() {\r\n              var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1), firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\r\n              var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5), firstDateOffset = firstDate.getTimezoneOffset();\r\n              var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\r\n              // Handle daylight time switch\r\n              if(firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\r\n              var days = [], day;\r\n              for(var i = 0; i < 42; i++) { // < 7 * 6\r\n                day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\r\n                days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\r\n              }\r\n              scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\r\n              scope.showLabels = true;\r\n              scope.labels = weekDaysLabelsHtml;\r\n              scope.rows = split(days, this.split);\r\n              this.built = true;\r\n            },\r\n            isSelected: function(date) {\r\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\r\n            },\r\n            isDisabled: function(date) {\r\n              var time = date.getTime();\r\n\r\n              // Disabled because of min/max date.\r\n              if (time < options.minDate || time > options.maxDate) return true;\r\n\r\n              // Disabled due to being a disabled day of the week\r\n              if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\r\n\r\n              // Disabled because of disabled date range.\r\n              if (options.disabledDateRanges) {\r\n                for (var i = 0; i < options.disabledDateRanges.length; i++) {\r\n                  if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\r\n                    return true;\r\n                  }\r\n                }\r\n              }\r\n\r\n              return false;\r\n            },\r\n            onKeyDown: function(evt) {\r\n              if (!picker.$date) {\r\n                return;\r\n              }\r\n              var actualTime = picker.$date.getTime();\r\n              var newDate;\r\n\r\n              if(evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\r\n              else if(evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\r\n              else if(evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\r\n              else if(evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\r\n\r\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n            }\r\n          }, {\r\n            name: 'month',\r\n            format: options.monthFormat,\r\n            split: 4,\r\n            steps: { year: 1 },\r\n            update: function(date, force) {\r\n              if(!this.built || date.getFullYear() !== viewDate.year) {\r\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n                picker.$build();\r\n              } else if(date.getMonth() !== viewDate.month) {\r\n                angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n                picker.$updateSelected();\r\n              }\r\n            },\r\n            build: function() {\r\n              var firstMonth = new Date(viewDate.year, 0, 1);\r\n              var months = [], month;\r\n              for (var i = 0; i < 12; i++) {\r\n                month = new Date(viewDate.year, i, 1);\r\n                months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\r\n              }\r\n              scope.title = formatDate(month, options.yearTitleFormat);\r\n              scope.showLabels = false;\r\n              scope.rows = split(months, this.split);\r\n              this.built = true;\r\n            },\r\n            isSelected: function(date) {\r\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\r\n            },\r\n            isDisabled: function(date) {\r\n              var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\r\n              return lastDate < options.minDate || date.getTime() > options.maxDate;\r\n            },\r\n            onKeyDown: function(evt) {\r\n              if (!picker.$date) {\r\n                return;\r\n              }\r\n              var actualMonth = picker.$date.getMonth();\r\n              var newDate = new Date(picker.$date);\r\n\r\n              if(evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\r\n              else if(evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\r\n              else if(evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\r\n              else if(evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\r\n\r\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n            }\r\n          }, {\r\n            name: 'year',\r\n            format: options.yearFormat,\r\n            split: 4,\r\n            steps: { year: 12 },\r\n            update: function(date, force) {\r\n              if(!this.built || force || parseInt(date.getFullYear()/20, 10) !== parseInt(viewDate.year/20, 10)) {\r\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n                picker.$build();\r\n              } else if(date.getFullYear() !== viewDate.year) {\r\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\r\n                picker.$updateSelected();\r\n              }\r\n            },\r\n            build: function() {\r\n              var firstYear = viewDate.year - viewDate.year % (this.split * 3);\r\n              var years = [], year;\r\n              for (var i = 0; i < 12; i++) {\r\n                year = new Date(firstYear + i, 0, 1);\r\n                years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\r\n              }\r\n              scope.title = years[0].label + '-' + years[years.length - 1].label;\r\n              scope.showLabels = false;\r\n              scope.rows = split(years, this.split);\r\n              this.built = true;\r\n            },\r\n            isSelected: function(date) {\r\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear();\r\n            },\r\n            isDisabled: function(date) {\r\n              var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\r\n              return lastDate < options.minDate || date.getTime() > options.maxDate;\r\n            },\r\n            onKeyDown: function(evt) {\r\n              if (!picker.$date) {\r\n                return;\r\n              }\r\n              var actualYear = picker.$date.getFullYear(),\r\n                  newDate = new Date(picker.$date);\r\n\r\n              if(evt.keyCode === 37) newDate.setYear(actualYear - 1);\r\n              else if(evt.keyCode === 38) newDate.setYear(actualYear - 4);\r\n              else if(evt.keyCode === 39) newDate.setYear(actualYear + 1);\r\n              else if(evt.keyCode === 40) newDate.setYear(actualYear + 4);\r\n\r\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n            }\r\n          }];\r\n\r\n        return {\r\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\r\n          viewDate: viewDate\r\n        };\r\n\r\n      };\r\n\r\n    };\r\n\r\n  });\r\n"],"sourceRoot":"/source/"}