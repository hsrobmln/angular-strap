{"version":3,"sources":["typeahead.min.js","typeahead/typeahead.js"],"names":["angular","module","provider","defaults","this","animation","prefixClass","prefixEvent","placement","template","trigger","container","keyboard","html","delay","minLength","filter","limit","autoSelect","comparator","trimValue","$get","$window","$rootScope","$tooltip","$timeout","TypeaheadFactory","element","controller","config","$typeahead","options","extend","parentScope","scope","$scope","$resetMatches","$matches","$activeIndex","$activate","index","$$postDigest","activate","$select","evt","select","$isVisible","update","matches","length","test","$applyPlacement","value","$setViewValue","$render","$digest","$emit","isString","$viewValue","$getIndex","l","i","$onMouseDown","preventDefault","stopPropagation","$onKeyDown","keyCode","isUndefined","show","$element","on","hide","off","document","body","directive","$parse","$q","$parseOptions","restrict","require","link","attr","forEach","key","isDefined","falseValueRegExp","bsOptions","parsedOptions","typeahead","watchOptions","watchedOptions","$match","replace","trim","$watchCollection","newValue","oldValue","valuesFn","then","values","$watch","ngModel","$modelValue","selectMode","substring","slice","isVisible","$formatters","push","modelValue","displayValue","undefined","$isEmpty","val","selected","label","isObject","toString","$on","destroy"],"mappings":"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","file":"typeahead.min.js","sourcesContent":[null,"'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\r\n\r\n  .provider('$typeahead', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'typeahead',\r\n      prefixEvent: '$typeahead',\r\n      placement: 'bottom-left',\r\n      template: 'typeahead/typeahead.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      minLength: 1,\r\n      filter: 'filter',\r\n      limit: 6,\r\n      autoSelect: false,\r\n      comparator: '',\r\n      trimValue: true\r\n    };\r\n\r\n    this.$get = function($window, $rootScope, $tooltip, $timeout) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n\r\n      function TypeaheadFactory(element, controller, config) {\r\n\r\n        var $typeahead = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $typeahead = $tooltip(element, options);\r\n        var parentScope = config.scope;\r\n        var scope = $typeahead.$scope;\r\n\r\n        scope.$resetMatches = function(){\r\n          scope.$matches = [];\r\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\r\n        };\r\n        scope.$resetMatches();\r\n\r\n        scope.$activate = function(index) {\r\n          scope.$$postDigest(function() {\r\n            $typeahead.activate(index);\r\n          });\r\n        };\r\n\r\n        scope.$select = function(index, evt) {\r\n          scope.$$postDigest(function() {\r\n            $typeahead.select(index);\r\n          });\r\n        };\r\n\r\n        scope.$isVisible = function() {\r\n          return $typeahead.$isVisible();\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $typeahead.update = function(matches) {\r\n          scope.$matches = matches;\r\n          if(scope.$activeIndex >= matches.length) {\r\n            scope.$activeIndex = options.autoSelect ? 0: -1;\r\n          }\r\n\r\n          // When the placement is not one of the bottom placements, re-calc the positioning\r\n          // so the results render correctly.\r\n          if (/^(bottom|bottom-left|bottom-right)$/.test(options.placement)) return;\r\n\r\n          // wrap in a $timeout so the results are updated\r\n          // before repositioning\r\n          $timeout($typeahead.$applyPlacement);\r\n        };\r\n\r\n        $typeahead.activate = function(index) {\r\n          scope.$activeIndex = index;\r\n        };\r\n\r\n        $typeahead.select = function(index) {\r\n          if(index === -1) return;\r\n          var value = scope.$matches[index].value;\r\n          // console.log('$setViewValue', value);\r\n          controller.$setViewValue(value);\r\n          controller.$render();\r\n          scope.$resetMatches();\r\n          if(parentScope) parentScope.$digest();\r\n          // Emit event\r\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $typeahead.$isVisible = function() {\r\n          if(!options.minLength || !controller) {\r\n            return !!scope.$matches.length;\r\n          }\r\n          // minLength support\r\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\r\n        };\r\n\r\n        $typeahead.$getIndex = function(value) {\r\n          var l = scope.$matches.length, i = l;\r\n          if(!l) return;\r\n          for(i = l; i--;) {\r\n            if(scope.$matches[i].value === value) break;\r\n          }\r\n          if(i < 0) return;\r\n          return i;\r\n        };\r\n\r\n        $typeahead.$onMouseDown = function(evt) {\r\n          // Prevent blur on mousedown\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n        };\r\n\r\n        $typeahead.$onKeyDown = function(evt) {\r\n          if(!/(38|40|13)/.test(evt.keyCode)) return;\r\n\r\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\r\n          if($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n          }\r\n\r\n          // Select with enter\r\n          if(evt.keyCode === 13 && scope.$matches.length) {\r\n            $typeahead.select(scope.$activeIndex);\r\n          }\r\n\r\n          // Navigate with keyboard\r\n          else if(evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\r\n          else if(evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\r\n          else if(angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\r\n          scope.$digest();\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var show = $typeahead.show;\r\n        $typeahead.show = function() {\r\n          show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function() {\r\n            $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\r\n            if(options.keyboard) {\r\n              element.on('keydown', $typeahead.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var hide = $typeahead.hide;\r\n        $typeahead.hide = function() {\r\n          $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\r\n          if(options.keyboard) {\r\n            element.off('keydown', $typeahead.$onKeyDown);\r\n          }\r\n          if(!options.autoSelect)\r\n            $typeahead.activate(-1);\r\n          hide();\r\n        };\r\n\r\n        return $typeahead;\r\n\r\n      }\r\n\r\n      TypeaheadFactory.defaults = defaults;\r\n      return TypeaheadFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsTypeahead', function($window, $parse, $q, $typeahead, $parseOptions) {\r\n\r\n    var defaults = $typeahead.defaults;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'template', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'trimValue'], function(key) {\r\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // Disable browser autocompletion\r\n        element.attr('autocomplete' ,'off');\r\n\r\n        // Build proper bsOptions\r\n        var filter = options.filter || defaults.filter;\r\n        var limit = options.limit || defaults.limit;\r\n        var comparator = options.comparator || defaults.comparator;\r\n\r\n        var bsOptions = attr.bsOptions;\r\n        if(filter) bsOptions += ' | ' + filter + ':$viewValue';\r\n        if (comparator) bsOptions += ':' + comparator;\r\n        if(limit) bsOptions += ' | limitTo:' + limit;\r\n        var parsedOptions = $parseOptions(bsOptions);\r\n\r\n        // Initialize typeahead\r\n        var typeahead = $typeahead(element, controller, options);\r\n\r\n        // Watch options on demand\r\n        if(options.watchOptions) {\r\n          // Watch bsOptions values before filtering for changes, drop function calls\r\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\r\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\r\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\r\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\r\n              typeahead.update(values);\r\n              controller.$render();\r\n            });\r\n          });\r\n        }\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\r\n          // console.warn('$watch', element.attr('ng-model'), newValue);\r\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\r\n          parsedOptions.valuesFn(scope, controller)\r\n          .then(function(values) {\r\n            // Prevent input with no future prospect if selectMode is truthy\r\n            // @TODO test selectMode\r\n            if(options.selectMode && !values.length && newValue.length > 0) {\r\n              controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\r\n              return;\r\n            }\r\n            if(values.length > limit) values = values.slice(0, limit);\r\n            var isVisible = typeahead.$isVisible();\r\n            isVisible && typeahead.update(values);\r\n            // Do not re-queue an update if a correct value has been selected\r\n            if(values.length === 1 && values[0].value === newValue) return;\r\n            !isVisible && typeahead.update(values);\r\n            // Queue a new rendering that will leverage collection loading\r\n            controller.$render();\r\n          });\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function(modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var displayValue = parsedOptions.displayValue(modelValue);\r\n          return displayValue === undefined ? '' : displayValue;\r\n        });\r\n\r\n        // Model rendering in view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          if(controller.$isEmpty(controller.$viewValue)) return element.val('');\r\n          var index = typeahead.$getIndex(controller.$modelValue);\r\n          var selected = angular.isDefined(index) ? typeahead.$scope.$matches[index].label : controller.$viewValue;\r\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\r\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\r\n          element.val(options.trimValue === false ? value : value.trim());\r\n        };\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (typeahead) typeahead.destroy();\r\n          options = null;\r\n          typeahead = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n"],"sourceRoot":"/source/"}