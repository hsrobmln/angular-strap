{"version":3,"sources":["collapse.min.js","collapse/collapse.js"],"names":["angular","module","provider","defaults","this","animation","disallowToggle","activeClass","startCollapsed","allowMultiple","controller","$scope","$element","$attrs","fixActiveItemIndexes","index","activeIndexes","self","$targets","$active","i","length","isActive","value","activeItems","indexOf","deactivateItem","splice","activateItem","$options","push","copy","forEach","key","isDefined","falseValueRegExp","test","$toggles","$viewChangeListeners","$registerToggle","element","$registerTarget","$unregisterToggle","$unregisterTarget","fn","$setActive","isArray","$activeIndexes","$get","$collapse","directive","$window","$animate","require","link","scope","attrs","controllers","ngModelCtrl","bsCollapseCtrl","$setViewValue","$formatters","modelValue","attr","$on","on","bsCollapseToggle","$apply","render","active","action","addClass"],"mappings":"AAOA,YAEAA,SCAMC,OAAA,8BDEHC,SCAG,YAAe,WDEjB,GAAIC,GAAWC,KAAKD,UCCpBE,UAAI,cACFC,gBAAW,EDCXC,YAAa,KACbC,gBAAgB,ECChBC,eAAK,GDGHC,EAAaN,KAAKM,WAAa,SAASC,EAAQC,EAAUC,GA2E5D,QAASC,GAAqBC,GAI5B,ICAE,GDDEC,GAAgBC,EAAKC,SAASC,QCC5BC,EAAA,EAAAA,EAAAJ,EAA0BK,OAASD,IACrCL,EAAAC,EAAwBI,KDCxBJ,EAAcI,GAAKJ,EAAcI,GAAK,GCKtCJ,EAAcI,KAAKH,EAASC,SAAAG,SAChCL,EAAOI,GAAYH,EAAQC,SAAAG,OAAgB,GDK7C,QCAMC,GAAWC,GDCf,GCAEC,GAAcP,EAAAC,SAAeC,ODC/B,OAAsC,KAA/BK,EAAYC,QAAQF,IAAgB,GAAQ,ECGrD,QAASG,GAAaH,GACpB,GAAIR,GAAME,EAAAC,SAASC,QAAeM,QAAAF,EDCpB,MAAVR,GCCFE,EAAKC,SAASC,QAAQQ,OAAOZ,EAAG,GDIpC,QCASa,GAASL,GDCXN,EAAKY,SAASpB,eAEjBQ,EAAKC,SAASC,QAAQQ,OAAO,EAAG,GCGf,KAAlBV,EAAOC,SAAAC,QAAWM,QAAAF,IACjBN,EAAAC,SAAYC,QAAAW,KAAAP,GD9GhB,GAAIN,GAAOb,ICGXa,GAAAY,SAAgB7B,QAAC+B,KAAA5B,GDCjBH,QCAKgC,SAAQ,YAAiB,iBAAS,cAAsB,iBAAO,iBAAA,SAAAC,GAChEjC,QAAKkC,UAASrB,EAAOoB,MAAAhB,EAAAY,SAAAI,GAAApB,EAAAoB,KAIzB,IAAAE,GAAgB,eDChBnC,SAAQgC,SAAS,iBAAkB,iBAAkB,iBAAkB,SAASC,GCC3EjC,QAAAkC,UAAArB,EAAuBoB,KAAAE,EAAAC,KAAAvB,EAAAoB,MDCxBhB,EAAKY,SAASI,IAAO,KAGzBhB,EAAKoB,YCCLpB,EAAKC,YDELD,EAAKqB,wBCELrB,EAAKsB,gBAAA,SAAoBC,GACvBvB,EAAIoB,SAAQP,KAAKU,IDEnBvB,ECAEwB,gBAAqB,SAAOD,GDC5BvB,EAAKC,SAASY,KAAKU,IAGrBvB,EAAKyB,kBAAoB,SAASF,GAChC,GAAIzB,GAAQE,EAAKoB,SAASZ,QAAQe,EAElCvB,GAAKoB,SAASV,OAAOZ,EAAO,IAE9BE,EAAK0B,kBAAoB,SAASH,GAChC,GCAEzB,GAAAE,EAAeC,SAAAO,QAAAe,EDGjBvB,GAAKC,SAASS,OAAOZ,EAAO,GAExBE,EAAKY,SAASpB,eCEhBiB,EAAAc,GDIF1B,EAAqBC,GCEvBE,EAAKqB,qBAAoBN,QAAA,SAAaY,GACpCA,ODKF3B,ECAIC,SAASC,QAASF,EAAAY,SAAerB,mBAAS,GDC9CS,EAAK4B,WCAIlC,EAAAkC,WAAA,SAAAtB,GACLvB,QAAA8C,QAAavB,GDCbN,EAAKC,SAASC,QAAUnB,QAAQ+B,KAAKR,GCElCN,EAAAY,SAAAvB,eDIHsB,EAAaL,GAFbD,EAASC,GAASG,EAAeH,GAASK,EAAaL,GAKzDN,ECAEqB,qBAAsBN,QAAA,SAAeY,GDCrCA,OAIJ3B,EAAK8B,eAAiB,WCCpB,MAAI9B,GAAAY,SAAgBpB,cAAcQ,EAAAC,SAAAC,QACD,IAAjCF,EAAIC,SAAWC,QAAIE,OAAcJ,EAAQC,SAAKC,QAAA,GAAA,ID6ClDf,MAAK4C,KAAO,WACV,GAAIC,KCGN,OAFDA,GAAU9C,SAAAA,EDCP8C,EAAUvC,WAAaA,ECCrBuC,KDKLC,UCAS,cAAS,UAAgB,WAAS,YAAO,SAAaC,EAAAC,EAAAH,GAEtDA,EAAc9C,QDEtB,QACEkD,SCAK,WAAa,cDClB3C,YAAa,SAAU,WAAY,SAAUuC,EAAUvC,YACvD4C,KAAM,SAAkBC,EAAOf,EAASgB,EAAOC,GAE7C,GCAIC,GAAYD,EAAc,GDC1BE,EAAiBF,EAAY,EAE9BC,KAGDC,ECAcrB,qBAAqBR,KAAA,WDCjC4B,EAAYE,cAAcD,EAAeZ,oBAI3CW,ECAOG,YAAA/B,KAAA,SAAAgC,GDEL,GAAI9D,QAAQ8C,QAAQgB,GAGlBH,ECAMd,WAAciB,ODEjB,CACH,GAAI9C,GAAgB2C,EAAeZ,gBAE/B/C,SCAK8C,QAAA9B,GDEuC,KAA1CA,EAAcS,QAAqB,EAAbqC,ICE9BH,EAAOd,WAAA,EAAAiB,GDGI9C,IAA+B,EAAb8C,GACzBH,EAAed,WAAwB,EAAbiB,GAG9B,MAAOA,WAUhBZ,UCAS,mBAAiB,WDEzB,OACEG,SCAU,YAAK,eDCfC,KAAM,SAAkBC,EAAOf,EAASgB,EAAOC,GCE7C,GDCIE,ICDWF,EAAA,GDCMA,EAAY,GAGjCjB,GCAEuB,KAAA,cAAe,YAGjBJ,EAAWpB,gBAAoBC,GDG/Be,ECAES,IAAM,WAAA,WDCNL,EAAejB,kBAAkBF,KAGnCA,EAAQyB,GAAG,QAAS,WAClB,GAAIlD,GAAQyC,EAAMU,kBAAoBP,EAAetB,SAASZ,QAAQe,EACtEmB,GAAed,WAAmB,EAAR9B,GAC1BwC,EAAMY,eAQbjB,UCAS,oBAAc,WAAY,SAAAE,GDElC,OACEC,SAAU,YAAa,eAEvBC,KAAM,SAAkBC,EAAOf,EAASgB,EAAOC,GAqB7C,QAASW,KACP,GAAIrD,GAAQ4C,EAAezC,SAASO,QAAQe,GACxC6B,ECAKV,EAAkBZ,iBACzBuB,EAAS,aDCPtE,SAAQ8C,QAAQuB,GACY,KAA1BA,EAAO5C,QAAQV,KCCrBuD,EAAS,YAGXvD,IAAesD,IACbC,EAAA,YDGAlB,EAASkB,GAAQ9B,EAASmB,EAAe9B,SAAStB,aChCpD,GACEoD,IADgBF,EAAS,GACRA,EAAA,GDGnBjB,GAAQ+B,SAAS,YAGdZ,EAAe9B,SAASxB,WCC3BmC,EAAU+B,SAAAZ,EAAuB9B,SAAAxB,WAIjCsD,EAASlB,gBAASD,GDGlBe,ECAMS,IAAA,WAAS,WACbL,EAAYhB,kBAAiBH,KDmB/BmB,EAAerB,qBAAqBR,KAAK,WACvCsC,MAEFA","file":"collapse.min.js","sourcesContent":[null,"'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.collapse', [])\r\n\r\n  .provider('$collapse', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-collapse',\r\n      disallowToggle: false,\r\n      activeClass: 'in',\r\n      startCollapsed: false,\r\n      allowMultiple: false\r\n    };\r\n\r\n    var controller = this.controller = function($scope, $element, $attrs) {\r\n      var self = this;\r\n\r\n      // Attributes options\r\n      self.$options = angular.copy(defaults);\r\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\r\n        if(angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\r\n      });\r\n\r\n      // use string regex match boolean attr falsy values, leave truthy values be\r\n      var falseValueRegExp = /^(false|0|)$/i;\r\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function(key) {\r\n        if(angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key]))\r\n          self.$options[key] = false;\r\n      });\r\n\r\n      self.$toggles = [];\r\n      self.$targets = [];\r\n\r\n      self.$viewChangeListeners = [];\r\n\r\n      self.$registerToggle = function(element) {\r\n        self.$toggles.push(element);\r\n      };\r\n      self.$registerTarget = function(element) {\r\n        self.$targets.push(element);\r\n      };\r\n\r\n      self.$unregisterToggle = function(element) {\r\n        var index = self.$toggles.indexOf(element);\r\n        // remove toggle from $toggles array\r\n        self.$toggles.splice(index, 1);\r\n      };\r\n      self.$unregisterTarget = function(element) {\r\n        var index = self.$targets.indexOf(element);\r\n\r\n        // remove element from $targets array\r\n        self.$targets.splice(index, 1);\r\n\r\n        if (self.$options.allowMultiple) {\r\n          // remove target index from $active array values\r\n          deactivateItem(element);\r\n        }\r\n\r\n        // fix active item indexes\r\n        fixActiveItemIndexes(index);\r\n\r\n        self.$viewChangeListeners.forEach(function(fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      // use array to store all the currently open panels\r\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\r\n      self.$setActive = $scope.$setActive = function(value) {\r\n        if(angular.isArray(value)) {\r\n          self.$targets.$active = angular.copy(value);\r\n        }\r\n        else if(!self.$options.disallowToggle) {\r\n          // toogle element active status\r\n          isActive(value) ? deactivateItem(value) : activateItem(value);\r\n        } else {\r\n          activateItem(value);\r\n        }\r\n\r\n        self.$viewChangeListeners.forEach(function(fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      self.$activeIndexes = function() {\r\n        return self.$options.allowMultiple ? self.$targets.$active :\r\n          self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\r\n      };\r\n\r\n      function fixActiveItemIndexes(index) {\r\n        // item with index was removed, so we\r\n        // need to adjust other items index values\r\n        var activeIndexes = self.$targets.$active;\r\n        for(var i = 0; i < activeIndexes.length; i++) {\r\n          if (index < activeIndexes[i]) {\r\n            activeIndexes[i] = activeIndexes[i] - 1;\r\n          }\r\n\r\n          // the last item is active, so we need to\r\n          // adjust its index\r\n          if (activeIndexes[i] === self.$targets.length) {\r\n            activeIndexes[i] = self.$targets.length - 1;\r\n          }\r\n        }\r\n      }\r\n\r\n      function isActive(value) {\r\n        var activeItems = self.$targets.$active;\r\n        return activeItems.indexOf(value) === -1 ? false : true;\r\n      }\r\n\r\n      function deactivateItem(value) {\r\n        var index = self.$targets.$active.indexOf(value);\r\n        if (index !== -1) {\r\n          self.$targets.$active.splice(index, 1);\r\n        }\r\n      }\r\n\r\n      function activateItem(value) {\r\n        if (!self.$options.allowMultiple) {\r\n          // remove current selected item\r\n          self.$targets.$active.splice(0, 1);\r\n        }\r\n\r\n        if (self.$targets.$active.indexOf(value) === -1) {\r\n          self.$targets.$active.push(value);\r\n        }\r\n      }\r\n\r\n    };\r\n\r\n    this.$get = function() {\r\n      var $collapse = {};\r\n      $collapse.defaults = defaults;\r\n      $collapse.controller = controller;\r\n      return $collapse;\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapse', function($window, $animate, $collapse) {\r\n\r\n    var defaults = $collapse.defaults;\r\n\r\n    return {\r\n      require: ['?ngModel', 'bsCollapse'],\r\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\r\n      link: function postLink(scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        if(ngModelCtrl) {\r\n\r\n          // Update the modelValue following\r\n          bsCollapseCtrl.$viewChangeListeners.push(function() {\r\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\r\n          });\r\n\r\n          // modelValue -> $formatters -> viewValue\r\n          ngModelCtrl.$formatters.push(function(modelValue) {\r\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            if (angular.isArray(modelValue)) {\r\n              // model value is an array, so just replace\r\n              // the active items directly\r\n              bsCollapseCtrl.$setActive(modelValue);\r\n            }\r\n            else {\r\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\r\n\r\n              if (angular.isArray(activeIndexes)) {\r\n                // we have an array of selected indexes\r\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\r\n                  // item with modelValue index is not active\r\n                  bsCollapseCtrl.$setActive(modelValue * 1);\r\n                }\r\n              }\r\n              else if (activeIndexes !== modelValue * 1) {\r\n                bsCollapseCtrl.$setActive(modelValue * 1);\r\n              }\r\n            }\r\n            return modelValue;\r\n          });\r\n\r\n        }\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapseToggle', function() {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsCollapse'],\r\n      link: function postLink(scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        // Add base attr\r\n        element.attr('data-toggle', 'collapse');\r\n\r\n        // Push pane to parent bsCollapse controller\r\n        bsCollapseCtrl.$registerToggle(element);\r\n\r\n        // remove toggle from collapse controller when toggle is destroyed\r\n        scope.$on('$destroy', function() {\r\n          bsCollapseCtrl.$unregisterToggle(element);\r\n        });\r\n\r\n        element.on('click', function() {\r\n          var index = attrs.bsCollapseToggle || bsCollapseCtrl.$toggles.indexOf(element);\r\n          bsCollapseCtrl.$setActive(index * 1);\r\n          scope.$apply();\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapseTarget', function($animate) {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsCollapse'],\r\n      // scope: true,\r\n      link: function postLink(scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        // Add base class\r\n        element.addClass('collapse');\r\n\r\n        // Add animation class\r\n        if(bsCollapseCtrl.$options.animation) {\r\n          element.addClass(bsCollapseCtrl.$options.animation);\r\n        }\r\n\r\n        // Push pane to parent bsCollapse controller\r\n        bsCollapseCtrl.$registerTarget(element);\r\n\r\n        // remove pane target from collapse controller when target is destroyed\r\n        scope.$on('$destroy', function() {\r\n          bsCollapseCtrl.$unregisterTarget(element);\r\n        });\r\n\r\n        function render() {\r\n          var index = bsCollapseCtrl.$targets.indexOf(element);\r\n          var active = bsCollapseCtrl.$activeIndexes();\r\n          var action = 'removeClass';\r\n          if (angular.isArray(active)) {\r\n            if (active.indexOf(index) !== -1) {\r\n              action = 'addClass';\r\n            }\r\n          }\r\n          else if (index === active) {\r\n            action = 'addClass';\r\n          }\r\n\r\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\r\n        }\r\n\r\n        bsCollapseCtrl.$viewChangeListeners.push(function() {\r\n          render();\r\n        });\r\n        render();\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n"],"sourceRoot":"/source/"}